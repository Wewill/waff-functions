<?php
/*
Plugin Name: WAFF Functions
Plugin URI: http://www.wilhemarnoldy.fr
Description: Bunch of functions from Template 1 to WAFF two theme & template : pre_get_posts, shortcodes, types, views, ordering ... 
Author: Wilhem Arnoldy
Author URI: http://www.wilhemarnoldy.fr
Version: 2.0
*/

//namespace WaffTwo\Functions;

if( ! defined( 'ABSPATH') ) {
    exit;
}

// Load text domain
// -------------------
define('WAFF_DIR', plugin_dir_path( __FILE__ ) );
define('WAFF_PO_PLUGINPATH', '/' . dirname(plugin_basename( __FILE__ )));
define('WAFF_PO_TEXTDOMAIN', 'waff');

add_action('plugins_loaded', 'waff_load_textdomain');
function waff_load_textdomain() {
	load_plugin_textdomain( WAFF_PO_TEXTDOMAIN, false, WAFF_PO_PLUGINPATH.'/languages/' );
}

/* LOAD PARENT ADMIN SCRIPTS
================================================== */
function child_admin_scripts($hook) {
	$screen       = get_current_screen();
	$screen_id    = $screen ? $screen->id : '';

    wp_enqueue_script( 'custom-admin', plugins_url('/js/custom-admin.js',__FILE__),'','',true);
}
add_action( 'admin_enqueue_scripts', 'child_admin_scripts', 30);


// Theme custom chimpy form
include( 'chimpy/custom-form-chimpy.php' );

// ADD PARTNERS COLORIZE fcts
if ( defined('WAFF_HAS_PARTNERS_COLORIZED_IMAGES') ) 
	include( 'colorizing/partners-functions.php' );

// ADD SECTION COLORIZE fcts
if ( defined('WAFF_HAS_SECTIONS_COLORIZED_IMAGES') ) 
	include( 'colorizing/sections-functions.php' );

// /**
//  * Notices
//  */


// // Add your query var if the coordinates are not retreive correctly.
// $args['_show_notice'] = true;
// $args['_generated_sizes'] = 'DEBUG';		        
// add_filter( 'redirect_post_location', array( $args, 'waff_add_notice_query_var' ), 99 );


// add_action( 'admin_notices', array( $this, 'waff_admin_notices' ) );
// add_filter( 'removable_query_args', array($this, 'waff_remove_notice_query_var'));

// function waff_add_notice_query_var( $location ) {
// 	remove_filter( 'redirect_post_location', 'waff_add_notice_query_var', 99 );
// 	return add_query_arg( array( 
// 		'new_sizes' => true, 
// 		'generated_sizes' => implode(', ', $this->_generated_sizes), 
// 		'aborded_sizes' => implode(', ', $this->_aborded_sizes), 
// 		'attachment_id' => sanitize_key($this->_attachment_id),
// 		), $location );
// }

// function waff_remove_notice_query_var($args) {
// 	array_push($args, 'new_sizes');
// 	array_push($args, 'generated_sizes');
// 	array_push($args, 'aborded_sizes');
// 	array_push($args, 'attachment_id');
// 	return $args;
// }

// function waff_admin_notices() {
// 	if ( !isset( $_GET['show_notice'] ) ) {
// 		return;
// 	}

// 	// Colorizing functions
// 	if ( !empty($_GET['colorized_images']) ) {
// 	? >
// 	<div class="notice notice-info is-dismissible">
// 		<p><b><?php esc_html_e( 'Created colorized image for :', 'waff' ); ? ></b> < ?php esc_html($_GET['colorized_images']); ? ></p>
// 		<button type="button" class="notice-dismiss"><span class="screen-reader-text">< ?php esc_html_e( 'Dismiss this notice.', 'waff' ); ? ></span></button>
// 	</div>
// 	< ? php
// 	}

// }


/**
 * General functions 
 * =================================================================
 * =================================================================
 * =================================================================
 * =================================================================
 */


/**
 * Add author dropdown selector for medias page
 */
function media_add_author_dropdown()
{
    $scr = get_current_screen();
    if ( $scr->base !== 'upload' ) return;

    $author   = filter_input(INPUT_GET, 'author', FILTER_SANITIZE_STRING );
    $selected = (int)$author > 0 ? (int)$author : '-1';
    $args = array(
        'show_option_none'   => __('All authors', 'waff'),
        'name'               => 'author',
        'selected'           => $selected
    );
    wp_dropdown_users( $args );
}
add_action('restrict_manage_posts', 'media_add_author_dropdown');

/**
 * Add author filter to query 
 * > NOT NEEDED since ?
 */
function author_filter($query) {
    if ( is_admin() && $query->is_main_query() ) {
        if (isset($_GET['author']) && $_GET['author'] == -1) {
            $query->set('author', '');
        }
    }
}
//add_action('pre_get_posts','author_filter');

/**
 * Set current editions global vars
 * NOW SET in wa-add-edition-tag.php
 */

// $current_edition = array();
// $previous_editions = array();
// $current_edition_id = 0;
// $current_edition_slug = '';
// $current_edition_films_are_online = false;
// $current_edition_parent_term_id = 0;

// //get_edition_vars
// function get_edition_vars() {
// 	global $current_edition, $previous_editions, $current_edition_id, $current_edition_slug, $current_edition_films_are_online, $current_edition_parent_term_id;

// 	$args = array(
// 		'taxonomy'=>'edition',
// 		'hide_empty' => false, // A ajouter pour commencer la saison
// 	);

// 	$tmp_editions = get_terms($args);
// 	$current_edition = false;
// 	foreach($tmp_editions as $tmp_edition) {
// 		$current = get_term_meta($tmp_edition->term_id, 'wpcf-e-current-edition', true);
// 		if ($current) {
// 			$current_edition = $tmp_edition;
// 			$current_edition_id = $tmp_edition->term_id;
// 			$current_edition_slug = $tmp_edition->slug;
// 			//break;
// 		} else {
// 			$previous_editions[] = $tmp_edition->slug;
// 		}
// 	}
// 	if (!$current_edition)
// 		print "OupsÂ¡ aucune edition en cours";
// 	unset($tmp_editions);
// 	$tmp_editions = null;
	
// 	// Get $current_edition_parent_term_id
// 	$args = array(
// 	    'taxonomy'   	=> 'section',
// 	    'hide_empty' 	=> false,
// 		'hierarchical' 	=> true,
// 	    'orderby' 	 	=> 'term_order',
// 	    'order' 		=> 'ASC',
// 	    'parent' 		=> 0, 
// 	    'meta_query' => array(
// 	         array(
// 	            'key'       => 'wpcf-select-edition',
// 	            'value'     => $current_edition_id,
// 	            'compare'   => '='
// 	         )
// 	    )
// 	);
// 	$get_edition_sections = get_terms($args);
// 	//print_r($get_edition_sections);

// 	foreach ($get_edition_sections as $section) {
//     	if ( $section->parent == 0 ) {
//  			$current_edition_parent_term_id = (int)$section->term_id;
//  		}
// 	}

// 	// Get current_edition_films_are_online option
// 	$tmp_current_edition_films_are_online = get_option('current_edition_films_are_online');
// 	$current_edition_films_are_online = ( !empty($tmp_current_edition_films_are_online) && $tmp_current_edition_films_are_online == 1)?true:false; 

// 	//wp_die('<pre>' . var_dump($current_edition) . var_dump($previous_editions) . var_dump($current_edition_id) . var_dump($current_edition_films_are_online) . var_dump($current_edition_parent_term_id) . '</pre>');		
// }
// add_action('init', 'get_edition_vars', 90); // wp_loaded

// //getcurrentedition_func
// function getcurrentedition_func($atts, $content = ''){
// 	global $current_edition, $previous_editions, $current_edition_id, $current_edition_films_are_online;

//   	// Extract atts
//     extract( shortcode_atts( array(
//         'display' => 'current',
//         'content_before' => '',
//         'content_after' => '',
//         'content_during' => ''
//     ), $atts ));


// 	setlocale(LC_TIME, 'fr_FR.UTF8');

// 	$today = getdate();
// 	$edition_start_date_meta = get_term_meta($current_edition->term_id, 'wpcf-e-start-date', True);
// 	$edition_end_date_meta = get_term_meta($current_edition->term_id, 'wpcf-e-end-date', True);
// 	$edition_start_date = date('d', $edition_start_date_meta);//Y-m-d
// 	$edition_end_date = date('d', $edition_end_date_meta);
// 	$edition_year = date('Y', $edition_start_date_meta);
// 	$edition_month = date('M', $edition_start_date_meta);
// 	$edition_monthnumeric = date('m', $edition_start_date_meta);

// 	switch (esc_attr($display)) {
//   		case "current":
//   			return $current_edition->slug;
//   		break;
//   		case "publicsafecurrent":
//   			return ($current_edition_films_are_online === true)?$current_edition->slug:'-1';
//   		break;
// 		case "previous":
//   			return $previous_editions;
// 		  break;
//   		case "publicsafeprevious":
// 			return ($current_edition_films_are_online === true)?$previous_editions:'-1';
// 		break;
// 		case "startdate":
//   			return $edition_start_date;
//   		break;
//   		case "enddate":
//   			return $edition_end_date;
//   		break;
//   		case "dates":
//   			return $edition_start_date . ' au ' . $edition_end_date;
//   		break;
//   		case "year":
//   			return $edition_year;
//   		break;
//   		case "month":
//   			return $edition_month;
//   		break;
//   		case "monthnumeric":
//   			return $edition_monthnumeric;
//   		break;
//   		case "id":
//   			return $current_edition_id;
//   		break;
//   		case "publicsafeid":
//   			return ($current_edition_films_are_online === true)?$current_edition_id:-1;
//   		break;
// 		case "content":
//   			if ( $today[0] < $edition_start_date_meta ) {
//   				$contenttoshow = esc_attr($content_before);
//   			} else if ( $today[0] > $edition_end_date_meta ) {
//   				$contenttoshow = esc_attr($content_after);
//   			} else {
//   				$contenttoshow = esc_attr($content_during);
//   			}
//   			return do_shortcode($contenttoshow);
//   		break;
//   		case "section":
//   			if ( $today[0] < $edition_start_date_meta ) {
//   				$contenttoshow = esc_attr($content_before);
//   			} else if ( $today[0] > $edition_end_date_meta ) {
//   				$contenttoshow = esc_attr($content_after);
//   			} else {
//   				$contenttoshow = esc_attr($content_during);
//   			}
//   			return do_shortcode('[spb_section spb_section_id="'.$contenttoshow.'" width="1/1" el_position="first last"]');
//   		break;
//   		default:
//   			return '';
//   		break;
//   	}
// }
// add_shortcode( 'getcurrenteditionsc', 'getcurrentedition_func' );

/**
 * Filters 
 * =================================================================
 * =================================================================
 * =================================================================
 * =================================================================
 */

/**
 * pre_get_posts : Modifiy tax numbers of posts + Order taxs by title ASC
 * > Maybe add a !is_admin() ? 
 */
function change_tax_num_of_posts( $wp_query ) {
    if( $wp_query->is_tax() && $wp_query->is_main_query()) {
        $wp_query->set('posts_per_page', 12);
        $wp_query->set( 'order', 'ASC' );
        $wp_query->set( 'orderby', 'title' );
    }
}
add_action('pre_get_posts', 'change_tax_num_of_posts' );

/**
 * WAFFTWO
 * pre_get_posts: Section query > taxonomy-section.php
 * LIMIT TO approved and programmed 
 * ORDER BY
 * > Not working 
 * TODO : https://wordpress.stackexchange.com/questions/385235/how-to-orderby-multiple-meta-fields-if-some-fields-are-empty
*/
add_filter( 'pre_get_posts', 'taxonomy_section_sort_order' );
function taxonomy_section_sort_order( $query ) {
    if ( is_admin() || !$query->is_main_query() )
		return;

	if ( $query->is_tax('section') && $query->is_main_query() ) {
		// Args
		$meta_query =   array(
			'relation' => 'AND',
			'status' => array(
					'key' => '_status',
					'value' => ['approved','programmed'],
					'compare' => 'IN',
			),
			array ( 
				'relation' => 'OR',
				'empty_order_title' => array(
					'key' => 'wpcf-f-order-title',
					'compare' => 'NOT EXISTS'
				),
				'order_title' => array(
					'key' => 'wpcf-f-order-title',
					'compare' => 'EXISTS'
				),
			),
			array(
				'relation' => 'OR',
				'empty_french_title' => array(
					'key' => 'wpcf-f-french-operating-title',
					'compare' => 'NOT EXISTS'
				),
				'french_title' => array(
					'key' => 'wpcf-f-french-operating-title',
					'compare' => 'EXISTS'
				),
			),
		);

		// Set meta queries 
   		$query->set('meta_query', $meta_query);
		$query->set('posts_per_page', 100);

		// Multiple order
		$query->set('orderby', array('order_title' => 'ASC', 'french_title' => 'ASC', 'title' => 'ASC'));

		return $query;
	}

	return $query;
}

/**
 * Types and views shortcodes 
 * =================================================================
 * =================================================================
 * =================================================================
 * =================================================================
 */

/**
 * Adds a trim_shortcode
 */
//if (function_exists('wpv_do_shortcode')) {
	function trim_shortcode($atts, $content = '') {
		$content = wpv_do_shortcode($content);
		$length = (int)$atts['length'];
		if (strlen($content) > $length) {
			$content = substr($content, 0, $length) . '&hellip;';
		}
		return $content;
	}
	add_shortcode('trim', 'trim_shortcode');
//}

/**
 * Adds a check if a child post exists shortcode
 */
if (function_exists('types_child_posts')) {
	function child_posts_exist_func( $atts ){
		$child_posts = types_child_posts('child-post-type-slug');
		if ($child_posts) {
			return 1;
		} else {
			return 0;
		}
	}
	add_shortcode( 'has-child-posts', 'child_posts_exist_func' );
}

/**
 * Adds a get current date shortcode
 */
function get_date_ts_func( $atts ){
	$today = getdate();
	return $today[0];
}
add_shortcode( 'get_date_ts', 'get_date_ts_func' );

/**
 * Adds a shortcode to count indexes
 */
function views_index() {
    global $WP_Views;
    static $i = 0;
    $i ++;
    return $i;
}
add_shortcode('wpv-post-index', 'views_index');

/**
 * Adds a begin shortcodes to extract from a html span span span the first match 
 * > Used in views 
 */
//if (function_exists('wpv_do_shortcode')) {
	function begin_shortcode($atts, $content = '') {
		$content = wpv_do_shortcode($content);
		preg_match_all('/<span\s*class="[^>]+">(.*?)<\/span>/s', $content, $match);
		return $match[0][0];
	}
	add_shortcode('begin', 'begin_shortcode');
//}

/**
 * Adds a get a parent term shortcodes
 * > Used in views 
 */
function parentterm_shortcode($atts, $content = '') {
	$atts  = shortcode_atts( array(
        'term' => '',
        'termtaxonomy' => 'room',
        'format' => 'name',
    ), $atts );

   	$tax = get_term_by('slug', $atts['term'], $atts['termtaxonomy']);
   	//print_r($tax);
   	if ( $tax->parent == 0 ) return '';
  	$parent_tax = get_term_by('term_id', $tax->parent, $atts['termtaxonomy']);

	$output = '';
	switch ($atts['format']) {
	case 'name':
		$output = $parent_tax->name; 
	break;
	case 'url':
		$output = get_term_link($parent_tax->term_id, $atts['termtaxonomy']);
	break;
	case 'slug':
		$output = $parent_tax->slug; 
	break;
	default:
		$output = $parent_tax->name; 
	break;
	}
	
	return $output;
}
add_shortcode('parent_term', 'parentterm_shortcode');

/**
 * Adds a shortcodes to check if a contact ID has contents to show 
 * > Used in views 
 */
function has_contact_content_func($atts, $content = ''){
	$atts  = shortcode_atts( array(
        'ids' => '',
    ), $atts );

	$contact_id = intval($atts['ids']);
	$contact_content = get_post($contact_id);
	
	$id = $contact_content->ID;
	$content = $contact_content->post_content;
	$title = $contact_content->post_title;
	$picture = get_post_meta( $contact_content->ID, 'wpcf-c-picture', true);
	$biofilmography_french = get_post_meta( $contact_content->ID, 'wpcf-c-biofilmography-french', true);
	$biofilmography_english = get_post_meta( $contact_content->ID, 'wpcf-c-biofilmography-english', true);
	/*print_r($contact_id); print_r($contact_content); print_r($biofilmography_french); print_r($content);*/
		
	if ( !empty($contact_content->post_content) ) {
		return 1;
	}
	
	if ( !empty($biofilmography_french) ) {
		return 1;
	}
}
add_shortcode( 'has_contact_content', 'has_contact_content_func' );

/**
 * Add SC to wp-types ref SC 
 * > Already added in general preferences  
 */
function prefix_add_my_shortcodes($shortcodes) {
    $shortcodes[] = 'has_contact_content';
    return $shortcodes;
}
add_filter('wpv_custom_inner_shortcodes', 'prefix_add_my_shortcodes');

/**
 * Add a shortcode to get rooms list 
 * > Used in views 
 */
function get_rooms_func($atts, $content = ''){
	$atts  = shortcode_atts( array(
        'ids' => '',
    ), $atts );

	$taxonomy_name = 'room';
	$room_id = intval($atts['ids']);

	$args=array(
    	'taxonomy' 	=> $taxonomy_name,
		'orderby' => 'name',
        'order' => 'ASC',
        'parent'	=> 0,
    	'hide_empty' => false,
    );

	$terms = get_terms($args);

	if  ($terms) {
	$html= '<ul class="room-list">';
	  foreach ($terms  as $term ) {
	  	$hide_rooms = get_term_meta($term->term_id, 'wpcf-r-hide-in-website', true);
	  	if ( $term->parent == 0 ) {

  			if ( $hide_rooms != 1 )
	    	$html .= '<li class="room-item parent" data-slug="'.$term->slug.'">' . $term->name . '</li>';

	  		$terms_children = get_term_children( $term->term_id, $taxonomy_name );
			  foreach ($terms_children  as $term_children ) {
				$t = get_term_by( 'id', $term_children, $taxonomy_name );
	  			$hide_room = get_term_meta($term->term_id, 'wpcf-r-hide-in-website', true);
	  			if ( $hide_room != 1 )
		    	$html .= '<li class="room-item child" data-slug="'.$t->slug.'"><a href="' . esc_url( get_term_link( $t ) ) . '" alt="' . esc_attr( sprintf( __( 'View all post filed under %s', 'swiftframework' ), $t->name ) ) . '">' . $t->name . '</a><div class="details-by-room" data-slug="'.$t->slug.'" data-color="'.get_term_meta($t->term_id, 'wpcf-r-color', true).'"></div></li>';

	    		}
	  	}
	  }
	  $html .= '</ul>';
	}

	if ( !empty($html) ) {
		return $html;
	}
}
add_shortcode( 'get_rooms', 'get_rooms_func' );

/**
 * Add a shortcode to get the day number by the real day 
 * > Used in views 
 */
function func_get_day_number($atts, $content = ''){
	global $current_edition;
  	// Extract atts
	  extract( shortcode_atts( array(
        'date' => null,
    ), $atts ));

	setlocale(LC_TIME, 'fr_FR.UTF8');
	$today = getdate();
	$edition_start_date_meta = get_term_meta($current_edition->term_id, 'wpcf-e-start-date', True);
	$edition_end_date_meta = get_term_meta($current_edition->term_id, 'wpcf-e-end-date', True);
	$edition_start_date = date('d', $edition_start_date_meta);//Y-m-d
	$edition_end_date = date('d', $edition_end_date_meta);
	$edition_current_date = date('d', $atts['date']);

	$count = 0;
	for ($day = $edition_start_date; $day <= $edition_end_date; $day++) { //$day <= $edition_end_date+1
		$count++;
		if ( $day == $edition_current_date )
			$theday = $count;
	}
	return (int)$theday;
}
add_shortcode( 'get_day_number', 'func_get_day_number' );

/**
 * Loop into a view to build calendar projection
 * > Used in views 
 */
function get_projection_days_func($atts, $content = ''){
	global $current_edition;

	/* Modele v1 week=1 & week=2 <td class="day" data-date="1573776000"><p class="impact-text-number">15</p>[get_rooms]<div class="details"></div></td>*/
	/* Modele v2 week=0
	    <!-- Day 1  -->
		<div class="mx-1 ml-0 p-3 flex-fill day active" data-bs-toggle="collapse" href="#day_{ID}" role="button" aria-expanded="false" aria-controls="day_{ID}">
			<div class="d-flex justify-content-center">
				<div class="d-flex flex-column">
					<span class="subline">Lundi</span><span class="display-2 light d-block mt-1">15</span>
				</div>
			</div>
			<p class="text-center mb-4"><i class="icon icon-down"></i></p>
			<ul class="projections-list list-unstyled">

			</ul>					
		</div>
	*/
	
  	// Extract atts
    extract( shortcode_atts( array(
		'week' => 0,
		'show_rooms' => 'false',
	), $atts ));

	$show_rooms = ($atts['show_rooms'] == 'true')?true:false;

	setlocale(LC_TIME, 'fr_FR.UTF8');
	$today = getdate();
	$edition_start_date_meta = get_term_meta($current_edition->term_id, 'wpcf-e-start-date', True);
	$edition_end_date_meta = get_term_meta($current_edition->term_id, 'wpcf-e-end-date', True);
	$edition_start_date = date('d', $edition_start_date_meta);//Y-m-d
	$edition_end_date = date('d', $edition_end_date_meta);
	//$edition_start_date_ts = $edition_start_date->getTimestamp();
	//$edition_end_date_ts = $edition_end_date->getTimestamp();
	
	$count = 1;
	$html_week1 = array();
	$html_week2 = array();
	$html_weekAll = array();
//	for ($day = $edition_start_date; $day <= $edition_end_date; $day++) { //$day <= $edition_end_date+1 // FIFAM
	for ($day = $edition_start_date_meta; $day <= $edition_end_date_meta; $day+=(60*60*24)) { //$day <= $edition_end_date+1 // Issue from DINARD, count must be from timestamp and not day
			// $day = timestamp 
		if ($count <= 5) {
			$html_week1[] = '<td class="day" data-date="'.(($edition_start_date_meta-82800) + (60 * 60 * (24 * $count-1))).'"><p class="impact-text-number">'.date('j', $day).'</p>'.do_shortcode('[get_rooms]').'<div class="details"></div></td>';
		} else {
			if ( $day <= $edition_end_date )
				$html_week2[] = '<td class="day" data-date="'.(($edition_start_date_meta-82800) + (60 * 60 * (24 * $count-1))).'"><p class="impact-text-number">'.date('j', $day).'</p>'.do_shortcode('[get_rooms]').'<div class="details"></div></td>';
			else 
				$html_week2[] = '<td class="day unactive hidden-xs" data-date="'.(($edition_start_date_meta-82800) + (60 * 60 * (24 * $count-1))).'"><p class="impact-text-number">'.date('j', $day).'</p>'.do_shortcode('[get_rooms]').'<div class="details"></div></td>';
		}

		$html_weekAll[] = sprintf('
			<!-- Day %s  -->
			<div class="card rounded-0 mx-1 ml-0 p-3 mb-3 flex-fill day --actives --unactive --has-projections %s" data-date="%s">
				<div class="card-body p-0 m-0 d-flex flex-column %s">
					<div class="part_one">
						<div class="d-flex justify-content-center">
							<div class="d-flex flex-column">
								<span class="subline">%s</span><span class="display-2 light d-block mt-1">%s</span>
							</div>
						</div>
						<p class="text-center mb-4"><i class="icon icon-down"></i></p>
					</div>
					<div class="part_two">
						<ul class="projections-list list-unstyled details"></ul>
						%s
					</div>
					<div class="part_three">
						%s
					</div>
				</div>
			</div>',
			$count,
			(($day >= $edition_end_date_meta)?'unactive d-none d-xl-block':''),
			(($edition_start_date_meta-82800) + (60 * 60 * (24 * $count-1))),
			(( $show_rooms == true )?'justify-content-start':'justify-content-between'),
			date_i18n('l', (($edition_start_date_meta-82800) + (60 * 60 * (24 * $count-1)))),
			date('j', $day),
			(( $show_rooms == true )?do_shortcode('[get_rooms]'):''),
			(( $show_rooms == false )?'<span class="badge rounded-pill bg-action-1 color-white subline"><i class="icon-down-right"></i> le mÃªme jour</span>':''),
			//$count
		);

		//print_r('<br>'.$day .' / '. $count);
		$count++;
	}
	
	/*
	print_r('<br>'.$edition_start_date);
	print_r('<br>'.$edition_end_date);
	print_r('<br>'.$edition_start_date_meta);
	print_r('<br>'.$edition_end_date_meta);
	print_r($html_week1);
	print_r($html_week2);
	*/
	
	if ( $week == 1 )
		return implode("\r\n", $html_week1);
	else if ( $week == 2 )
		return implode("\r\n", $html_week2);
	else if ( $week == 0 )
		return implode("\r\n", $html_weekAll);
	else 
		return implode("\r\n", $html_weekAll);
}
add_shortcode( 'get_projection_days', 'get_projection_days_func' );








// // exclude_posts_with_meta_from_orderby: Exlcude meta post from orderby / evite d'afficher les films non selectionnes
// function exclude_posts_with_meta_from_orderby( $query ) {
//     if( is_admin() || !$query->is_orderby() )
//         return;

// //    $query->set('meta_query', array(
// //        'relation' => 'OR',
// //	        array(
// //	            'key'   => '_status',
// //	            'value' => 'approved'
// //	        ),
// //	        //some posts don't have a sponsor_post_type meta field set, so check for those too
// //	        array(
// //	        	'key' => '_status',
// //	        	'compare' => 'NOT EXISTS'
// //	        )
// //    	)
// //    );
// /*
// 	$args = array(
// 		'post_type' => 'film',
// 		//get all posts
// 		'posts_per_page' => -1,
// 		//return an array of post IDs
// 		'fields' => 'ids',
// 		//now check for posts that have a _status that is not 'approved'
// 		'meta_query' => array(
// 			'relation' => 'OR',
// 				array(
// 					'key'   => '_status',
// 					'value' => 'approved',
// 				'compare' => '!='
// 				),
// 			//some posts don't have a sponsor_post_type meta field set, so check for those too
// 			array(
// 				'key' => '_status',
// 				'compare' => 'NOT EXISTS'
// 			)
// 		)
// 	);
//       $excluded_ids = get_posts($args);
// */

// 	$args = array(
// 		'post_type' => 'film',
// 		//get all posts
// 		'posts_per_page' => -1,
// 		//return an array of post IDs
// 		'fields' => 'ids',
// 		//now check for posts that have a _status that is  'approved'
// 		'meta_query' => array(
// 			array(
// 				'key'   => '_status',
// 				'value' => ['approved','programmed'],
// 			'compare' => 'NOT IN'
// 			)
// 		),
// 	);
// 	$args2 = array(
// 		'post_type' => 'film',
// 		//get all posts
// 		'posts_per_page' => -1,
// 		//return an array of post IDs
// 		'fields' => 'ids',
// 		//now check for posts that have a _status that is not 'approved'
// 		'meta_query' => array(
// 			array(
// 				'key' => '_status',
// 				'compare' => 'NOT EXISTS'
// 			)
// 		),
// 	);
	
// 	//print_r(getcurrentedition_func(array('display' => 'previous')));
	
// 	$args3 = array(
// 		'post_type' => 'film',
// 		//get all posts
// 		'posts_per_page' => -1,
// 		//return an array of post IDs
// 		'fields' => 'ids',
// 		//now check for posts that have a _status that is not previous
// 	    'tax_query' => array(
// 	        array (
// 	            'taxonomy' => 'edition',
// 	            'field' => 'slug',
// 	            'terms' => getcurrentedition_func(array('display' => 'previous')),
// 			)
// 		),
// 	);      
		
// 		//now get the posts
//       $excluded_ids = get_posts($args);
//       $excluded_ids2 = get_posts($args2);
//       $excluded_ids3 = get_posts($args3);
//       $excluded_ids = array_merge($excluded_ids, $excluded_ids2, $excluded_ids3);
//       $excluded_ids = array_unique($excluded_ids);

//       //add these post IDs to the 'post__not_in' query parameter
//       $query->set('post__not_in', $excluded_ids);

// }
// // Desactive en WAFFTWO 
// //add_action('pre_get_posts','exclude_posts_with_meta_from_orderby');




/**
 * WAFFTWO FCTS 
 * 
 */

// // filtrage des recherches -> limite aux articles publiÃ©s, aux pages et Ã  un custom post type
// // WAFFTWO > Desactiver car bcp bcp trop lent > on privilÃ©gie la recherche via SearchWP
// function waff_advanced_search( $query ) {
//     if ( $query->is_search && !is_admin() ) {
// 		// First, only search onto some post_types
// 		$query->set( 'post_type', array( 'post', 'page', 'film', 'jury' ) );
		
// 		// Then filter films by 
// 		$args_meta = array(
// 			'post_type' => 'film',
// 			//get all posts
// 			'posts_per_page' => -1,
// 			//return an array of post IDs
// 			'fields' => 'ids',
// 			//now check for posts that have a _status that is not 'approved'
// 			'meta_query' => array(
// 				'relation' => 'OR',
// 				// If not approved or programmed
// 				array(
// 					'key'   => '_status',
// 					'value' => ['approved','programmed'],
// 					'compare' => 'NOT IN'
// 				),
// 				// If no status
// 				array(
// 					'key' => '_status',
// 					'compare' => 'NOT EXISTS'
// 				),
// 			),
// 		);
		
// 		$args_tax = array(
// 			'post_type' => 'film',
// 			//get all posts
// 			'posts_per_page' => -1,
// 			//return an array of post IDs
// 			'fields' => 'ids',
// 			//now check for posts that have a _status that is not previous
// 			'tax_query' => array(
// 				array (
// 					'taxonomy' => 'edition',
// 					'field' => 'slug',
// 					'terms' => getcurrentedition_func(array('display' => 'previous')),
// 				),
// 			),
// 		);

// 		//now get the posts
// 		$excluded_ids 	= get_posts($args_meta);
// 		$excluded_ids2 	= get_posts($args_tax);
// 		$excluded_ids 	= array_merge($excluded_ids, $excluded_ids2);
// 		$excluded_ids 	= array_unique($excluded_ids);	

// 		//add these post IDs to the 'post__not_in' query parameter
// 		$query->set('post__not_in', $excluded_ids);

// 		// Set posts_per_page 
// 		$query->set('posts_per_page', 20);

//     }
//     return $query;
// }
// // ajout du filtrage sur le hook 'pre_get_post'
// //add_filter( 'pre_get_posts', 'waff_advanced_search' );


/**
 * Types and views filters 
 * =================================================================
 * =================================================================
 * =================================================================
 * =================================================================
 */


/*
	Toolset VIEWS
	Ajoute un filtre par critere status dans la vue Tous les films : 34906
*/
/*add_filter( 'wpv_filter_query', 'custom_orderby_criteria_34906',10,2 );
function custom_orderby_criteria_34906( $query_args ,$view_settings ) {
	if (isset($view_settings['view_id']) && $view_settings['view_id'] == 34906 ) {
			$index = 0;
			if(isset($query_args['meta_query'])){
			$index = count($query_args['meta_query'])+1;
			}
			$query_args['meta_query'][$index] =   array(
				'relation' => 'AND',
				array(
						'key' => '_status',
						'value' => ['approved','programmed'],
						'compare' => 'IN',
				)
			);
	}
return $query_args;
}*/

/*
	Toolset VIEWS
	Ajoute un filtre par critere status dans la vue Tous les films : 34906 ( tous-les-films )
	CE FILTRE EST UTILISE POUR LES LISTE DE FILMS MAIS PAS POUR LES PROJECTIONS par exemple 
	En effet, un film doit forcement etre programmÃ© ou approuvÃ© pour avoir Ã©tÃ© projetÃ©  
*/
add_filter( 'wpv_filter_query', 'custom_metaquery_criteria_status',20,2 );
function custom_metaquery_criteria_status( $query_args, $view_settings ) {
	//echo $view_settings['view_id'];
	if (isset($view_settings['view_id']) ) {
		if ( in_array($view_settings['view_id'], array(34906) ) ) { 
			$index = 0;
			if(isset($query_args['meta_query'])){
			$index = count($query_args['meta_query'])+1;
			}
			$query_args['meta_query'][$index] =   array(
				'relation' => 'AND',
				array(
						'key' => '_status',
						'value' => ['approved','programmed'],
						'compare' => 'IN',
				)
			);
		}
	}
	return $query_args;
}




//add_action( 'pre_get_posts', 'taxonomy_section_sort_order'); 
// function taxonomy_section_sort_order($query) {
	
// 	if (is_admin()){
//         return;
// 	}
	
// 	if(is_post_type_archive('film')):
// 		// Meta : f-french-operating-title
// 		$query->set( 'meta_key', 'wpcf-f-french-operating-title' );
// 		// Meta : f-order-title

// 		//Set the order ASC or DESC
// 		$query->set( 'order', 'DESC' );
// 		//Set the orderby
// 		$query->set( 'orderby', array('meta_value', 'title') );

// 	endif;    
// };



/*
	Toolset VIEWS
	Ajoute un filtre par critere status dans la vue Related / film : 44397
	02/2021
	N'EST PAS UTILISE
*/
//add_filter( 'wpv_filter_query', 'custom_orderby_criteria_44397',20,3 );
function custom_orderby_criteria_44397( $view_args, $view_settings, $view_id ) {
	echo $view_id; // GÃ©rÃ© dans Views avec promote puis ordre alÃ©atoire 
	if (isset($view_settings['view_id']) && $view_settings['view_id'] == 44397 ) {

        $view_args['meta_query'] = array(
            'relation'  => 'OR',
            'promoted'        	=> array(
				'key' => 'wpcf-f-promote',
				'value' => 1,
				'compare' => '=',
			),
            /*'notpromoted'    	=> array(
				'key' => 'wpcf-f-promote',
				'value' => 1,
				'compare' => '!=',
            ),*/
            'notpromoted'      	=> array(
                'key'     => 'wpcf-f-film-poster',
                'compare' => 'EXISTS',
			),
        );
 
        $view_args['orderby'] = array(
                'promoted'        	=> 'ASC',
                'notpromoted'    	=> 'ASC',
		);
		
	}

	return $view_args;
}






/*
	Toolset VIEWS
	Ajouter un orderby custom meta field dans la vue Projection Dans l'heure.
*/


//add_filter( 'wpv_filter_query_post_process', 'projections_sort_query_func', 40, 3 );
// Fonctionne mais apparement il y a un autre tri qui casse celui-ci
function projections_sort_query_func( $query, $view_settings, $view_id ) {
  if ( !empty( $query->posts ) &&  $view_id == 34922) {
    usort($query->posts, "calculated_time_cmp");
  }
  return $query;
}
function calculated_time_cmp($a, $b)
{

  	$a_date = get_post_meta($a->ID, 'wpcf-p-date', true);
  	$a_date = new DateTime();
	$a_date->setTimestamp($a_date);

  	$b_date = get_post_meta($b->ID, 'wpcf-p-date', true);
  	$b_date = new DateTime();
	$b_date->setTimestamp($b_date);

  	$a = get_post_meta($a->ID, 'wpcf-p-start-and-stop-time', true);
  	$b = get_post_meta($b->ID, 'wpcf-p-start-and-stop-time', true);
  	//$a_time = new DateTime($a['begin']);
  	//$b_time = new DateTime($b['begin']);

	$a_merge = new DateTime($a_date->format('Y-m-d') . ' ' . $a["begin"] . ':00' );
	$b_merge = new DateTime($b_date->format('Y-m-d') . ' ' . $b["begin"] . ':00' );

//	wp_die(var_dump(
//		array(
//			array($a['begin'], $a_date->format('Y-m-d'), $a_merge, $a_merge->getTimestamp()),
//			array($b['begin'], $b_date->format('Y-m-d'), $b_merge, $b_merge->getTimestamp())
//		)
//	));


	//$a_merge = $a_date->setTime($a_time->format('H'), $a_time->format('i'), $a_time->format('s'));
	//$b_merge = $b_date->setTime($b_time->format('H'), $b_time->format('i'), $b_time->format('s'));


		//	wp_die(var_dump($a_merge->getTimestamp()));

    if ($a_merge->getTimestamp() == $b_merge->getTimestamp() ) { return 0; }
    return ($a_merge->getTimestamp() < $b_merge->getTimestamp() ) ? -1 : 1;
}

//add_filter( 'wpv_filter_query', 'custom_orderby_criteria_34922',10,2 );
function custom_orderby_criteria_34922( $query_args ,$view_settings ) {
 if (isset($view_settings['view_id']) && $view_settings['view_id'] == 34922 ) {

 			//print_r($query_args);

             $index = 0;
             if(isset($query_args['meta_query'])){
                $index = count($query_args['meta_query'])+1;
             }
             $query_args['meta_query'][$index] =   array(
                        'relation' => 'AND',
                        array(
                                'key' => 'wpcf-p-start-and-stop-time__begin',
                                'value' => '10',
                                'compare' => 'LIKE',
                        )
        );

}
return $query_args;
}

//add_filter( 'wpv_filter_query', 'custom_orderby_criteria_25296',10,3 );
function custom_orderby_criteria_25296( $query_args ,$view_settings, $view_id ) {
 if (isset($view_settings['view_id']) && $view_settings['view_id'] == 25296 ) {
 	//print_r($query_args);
    $query_args['orderby'] = 'wpcf-p-start-and-stop-time__begin';
    $query_args['order'] = 'ASC';
    return $query_args;
 }
}

//add_filter( 'wpv_filter_query', 'custom_orderby_criteria_47006',10,3 );
function custom_orderby_criteria_47006( $query_args ,$view_settings, $view_id ) {
	if (isset($view_settings['view_id']) && $view_settings['view_id'] == 47006 ) {
		//print_r($query_args);
	   $query_args['orderby'] = 'wpcf-p-start-and-stop-time__begin';
	   $query_args['order'] = 'ASC';
	   return $query_args;
	}
   }

/* 
	Ajouter des query vars 
*/
function theme_query_vars( $qvars ) {
    $qvars[] = 'noedition';
    return $qvars;
}
add_filter( 'query_vars', 'theme_query_vars' );

/**
	?? UtilisÃ© en tant que fct dans views ??
*/

function wpv_conditional_post_has_content($type, $object) {
    $return = 0;
    if ( $type == 'film' ) {
        if ( empty( $object->post_content ) ) {
            $return = 0;
        } else {
            $return = count($object->post_content);
        }
    }
    return $return;
}

/**
 * Register connections shortcode
 *
 * <a href="https://toolset.com/forums/users/att/" rel="nofollow" tabindex="79">@att</a> (string) relationship : post relationship slug
 * @return count of connected posts
 */
add_shortcode( 'connections', function( $atts = [] ){

    // provide defaults
    $atts = shortcode_atts(
        array(
            'relationship'      =>   'film',
            'forposttype'      =>   'projection',
        ),
        $atts
    );

    global $post;
    $count = 0;

   // $relationship = toolset_get_relationship( array( get_post_type($post) , $atts['relationship'] ) );
   // $relationship = toolset_get_relationship( array( $atts['relationship'] , get_post_type($post) ) );
    $relationship = toolset_get_relationship(array($atts['relationship'],$atts['forposttype']));

    if ( $relationship ) {

        $parent = $relationship['roles']['parent']['types'][0];
        $child = $relationship['roles']['child']['types'][0];
        $type = $post->post_type;

        $origin = ( $parent == $type ) ? 'parent' : 'child';

        // Get connected posts
        $connections = toolset_get_related_posts( $post->ID, array($atts['relationship'],$atts['forposttype']), $origin, 9999, 0, array(), 'post_id', 'other', null, 'ASC', true, $count );


    }

    return $count;
});


function date_now_shortcode($atts) {
	return time();
}
add_shortcode('datenow', 'date_now_shortcode');

// Add Shortcode [do_markdown]content
function func_do_markdown($atts, $content='') {
    // provide defaults
    $atts = shortcode_atts(
        array(
			'raw' => false
        ),
        $atts
    );

	//  ['\\\*\\\*(\\\w.+?)\\\*\\\*', {'bold': true}], // **value**
	//  ['\\\*(\\\w.+?)\\\*', {'italics': true}], // *value*
	$content = do_shortcode($content);
	$content = str_replace('###SPACE###', '', $content); // Je ne sais pas d'ou cela provient mais probablement types
	$content = str_replace('&#8217;', '\'', $content); // Gerer les carateres spÃ©ciaux de word 
	$content = str_replace('&#8220;', '&ldquo;', $content);
	$content = str_replace('&#8221;', '&rdquo;', $content);
	$content = str_replace('&#8211;', '&ndash;', $content);
	$content = str_replace('&#8230;', '&hellip;', $content); // GÃ©rer les ...
	$content = str_replace(': #', ': &num;', $content); // GÃ©rer les attrributs <span style="color: #...."
	
	if ( $atts['raw'] != true ) {
		$content = htmlentities($content);
		$patterns = array('/\*\*\*(\w.+?)\*\*\*/', '/\*\*(\w.+?)\*\*/', '/\*(\w.+?)\*/', '/\#\#([^#]+?)\#\#/', '/\#([^#]+?)\#/'); // '/\#\#([^#(SPACE)]+?)\#\#/', '/\#([^#(SPACE)]+?)\#/' // '/\#\#(\w.+?)\#\#/', '/\#(\w.+?)\#/'
		$replacements = array('<span class="label">$1</span>', '<strong>$1</strong>', '<em>$1</em>', '<span class="paragraph-huge">$1</span>', '<span class="paragraph-small">$1</span>');
		ksort($patterns);
			ksort($replacements);
		$content = preg_replace($patterns, $replacements, $content);
	} else {
		$content = htmlentities($content);
		$patterns = array('/\*\*\*(\w.+?)\*\*\*/', '/\*\*(\w.+?)\*\*/', '/\*(\w.+?)\*/', '/\#\#([^#]+?)\#\#/', '/\#([^#]+?)\#/'); // '/\#\#([^#(SPACE)]+?)\#\#/', '/\#([^#(SPACE)]+?)\#/' // '/\#\#(\w.+?)\#\#/', '/\#(\w.+?)\#/'
		$replacements = array('$1', '$1', '$1', '$1', '$1');
		ksort($patterns);
			ksort($replacements);
		$content = preg_replace($patterns, $replacements, $content);
	}
	return html_entity_decode($content);
}
add_shortcode( 'do_markdown', 'func_do_markdown' );

// Add Shortcode [strip_tags] to remove <span> or <p> to content
function func_clean_tags($atts, $content='') {
    // provide defaults
    $atts = shortcode_atts(
        array(
        ),
        $atts
    );
	$content = strip_tags(do_shortcode($content), array('strong','em','a','i','b','u'));
  	return $content;
}
add_shortcode( 'clean_tags', 'func_clean_tags' );


// check_if_content
function func_if_content($atts, $content='') {
    // provide defaults
    $atts = shortcode_atts(
        array(
        ),
        $atts
	);
	$return = false;
	$content = do_shortcode($content);
	if ( strlen(strip_tags($content)) > 0 ) $return = true;
  	return $return;
}
add_shortcode( 'check_if_content', 'func_if_content' ); // Ne fonctionne plus.. je ne sais pas pourquoi > le SC ne ferme pas ex : return content...[/check_if_content]

function func_has_content($atts, $content='') {
    // provide defaults
    $atts = shortcode_atts(
        array(
        ),
        $atts
	);
	$return = false;
	$content = wpv_do_shortcode($content);
	if ( strip_tags($content) != '' ) $return = true;
  	return $return;
}
add_shortcode( 'has_content', 'func_has_content' );

function wpv_has_content() { // directly in a conditionnal 
	return "DEGUG";
}

// Has french title > used for views 
function func_has_french_title($atts, $content='') {
    // provide defaults
    $atts = shortcode_atts(
        array(
            'filmid' =>   '',
        ),
        $atts
    );
	
	$return = false;
  	$meta = get_post_meta($atts['filmid'], 'wpcf-f-french-operating-title', true);
	if ( $meta != '') $return = true;
  	return $return;
}
add_shortcode( 'has_french_title', 'func_has_french_title' );


// Add Shortcode [get_parent_term_id termslug=""]
function func_get_parent_term_ID($atts, $content='') {
	global $current_edition_id;
	global $current_edition_parent_term_id;

    // provide defaults
    $atts = shortcode_atts(
        array(
            'termslug' =>   '',
            'termtaxonomy' =>   '',
        ),
        $atts
    );

	$termParent = 0;
	$termslug = $atts['termslug'];
	$termtaxonomy = $atts['termtaxonomy'];

	if(!empty($termslug) && $termslug !='' ) {
		$term = get_term_by('slug', $termslug, $termtaxonomy);
		$termid = $term->term_id;
		$parenttermid = $term->parent;
		$termParent = ($parenttermid == 0 || $parenttermid == $current_edition_parent_term_id) ? $termid : $parenttermid;
	}

  	return $termParent;
}
add_shortcode( 'get_parent_term_id', 'func_get_parent_term_ID' );


// Add Shortcode [get_term_meta termid="" termmeta=""]
function func_get_term_meta_data($atts, $content='') {
    // provide defaults
    $atts = shortcode_atts(
        array(
            'termid' =>   '',
            'termslug' =>   '',
            'termtaxonomy' =>   '',
            'termmeta' =>   '',
            'return' =>   '',
        ),
        $atts
    );
    
	$meta = 0;
	$termid = $atts['termid'];
	$termmeta = $atts['termmeta'];

	//RAW
	if(!empty($termid) && $termid !='' ) {
		$meta = get_term_meta($termid, $termmeta, true);
	}

	$termslug = $atts['termslug'];
	$termtaxonomy = $atts['termtaxonomy'];


	if(!empty($termslug) && $termslug !='' ) {
		$term = get_term_by('slug', $termslug, $termtaxonomy);
		$termid = $term->term_id;
		$meta = get_term_meta($termid, $termmeta, true);
	}
	
	if ( $atts['return'] == 'boolean') {
		if ( $meta != '') {
			$meta = true;
		} else {
			$meta = false;
		}
	}

  	return $meta;
}
add_shortcode( 'get_term_meta', 'func_get_term_meta_data' );

// Add Shortcode [get_terms post_id="" taxonomy="" term=""]
  function get_post_terms( $atts ) {
    $vals =  shortcode_atts(
      array(
        'post_id' => '',
        'taxonomy' => '',
        'term' => '',
      ), $atts );
    // Code
    $terms = get_the_terms( $vals["post_id"], $vals["taxonomy"] );
    $draught_links = array();
    if (is_array($terms)){
      foreach ( $terms as $term ) {
        $draught_links[] = $term->$vals['term'];
      }
      return implode (", ", $draught_links);
    }
  }
  add_shortcode( 'get_terms', 'get_post_terms' );
  
  

/*
	Get post taxonomies for view but return only one tax
	Same as wpv-post-taxonomy
*/

add_shortcode('wpv-single-post-taxonomy', 'single_post_taxonomies_shortcode_render');

function single_post_taxonomies_shortcode_render($atts) {
    $post_id_atts = new WPV_wpcf_switch_post_from_attr_id($atts);
 
    extract(
        shortcode_atts( array('format' => '',
                              'type' => 'category',
                              'show' => 'name',
                              'order' => 'asc'
                              ),
                       $atts )
    );
 
    global $wplogger;
     
    $out = '';
    if (empty($atts['type'])) {
        return $out;
    }
    $types = explode(',', @strval($atts['type']));
    if (empty($types)) {
        return $out;
    } else {
		$types = array_map( 'trim', $types );
		$types = array_map( 'sanitize_text_field', $types );
	}
     
    global $post;
    $separator = !empty($atts['separator']) ? @strval($atts['separator']) : ', ';
    $out_terms = array();
    foreach ($types as $taxonomy_slug) {
        $terms = get_the_terms($post->ID, $taxonomy_slug);
        if ( $terms && !is_wp_error( $terms )) {

			foreach ( $terms as $term ) {
				// Adjust the term in case WPML is not set to auto-adjust IDs.
				$term = get_term( apply_filters( 'wpml_object_id', $term->term_id, $taxonomy_slug, true ) );
				// Check whether the filter and the core function return the right object type.
				if ( ! $term instanceof WP_Term ) {
					continue;
				}

				switch ( $atts['format'] ) {
					case 'text':// DEPRECATED at 1.9, keep for backwards compatibility
						$text = $term->name;
						switch ( $atts['show'] ) {
							case 'description':
								$text = $term->description;
								break;
							case 'count':
								$text = $term->count;
								break;
							case 'slug':
								$text = $term->slug;
								break;
						}
						$out_terms[ $term->name ] = $text;
						break;
					case 'name':
						$out_terms[ $term->name ] = $term->name;
						break;
					case 'description':
						$out_terms[ $term->name ] = $term->description;
						break;
					case 'count':
						$out_terms[ $term->name ] = $term->count;
						break;
					case 'slug':
						$out_terms[ $term->name ] = urldecode( $term->slug );
						break;
					case 'url':
						$term_link = get_term_link( $term, $taxonomy_slug );
						$out_terms[ $term->name ] = $term_link;
						break;
					default:
						$term_link = get_term_link( $term, $taxonomy_slug );
						$text = $term->name;
						switch ( $atts['show'] ) {
							case 'description':
								$text = $term->description;
								break;
							case 'count':
								$text = $term->count;
								break;
							case 'slug':
								$text = $term->slug;
								break;
						}
						$out_terms[ $term->name ] = '<a href="' . $term_link . '">' . $text . '</a>';
						break;
				}
			}

        }
    }

    if (!empty($out_terms)) {
        if ($atts['order'] == 'asc') {
            ksort($out_terms);
        } elseif ($atts['order'] == 'desc') {
            ksort($out_terms);
            $out_terms = array_reverse($out_terms);
        }
		$out = array_shift($out_terms); // display-only-one-category
        //$out = implode($separator, $out_terms);
    }
    
    apply_filters('wpv_shortcode_debug','wpv-post-taxonomy', json_encode($atts), '', 'Data received from cache', $out);
    
    return $out;
}


/*
	Get post taxonomies for view but return only if in current edition 
	Same as wpv-post-taxonomy
*/

add_shortcode('wpv-post-taxonomy-in-edition', 'current_edition_post_taxonomies_shortcode_render');
function current_edition_post_taxonomies_shortcode_render($atts) {
    $post_id_atts = new WPV_wpcf_switch_post_from_attr_id($atts);
 
    extract(
        shortcode_atts( array('format' => '',
                              'type' => 'category',
                              'show' => 'name',
                              'order' => 'asc'
                              ),
                       $atts )
    );
 
    global $wplogger, $current_edition_id;
     
    $out = '';
    if (empty($atts['type'])) {
        return $out;
    }
    $types = explode(',', @strval($atts['type']));
    if (empty($types)) {
        return $out;
    } else {
		$types = array_map( 'trim', $types );
		$types = array_map( 'sanitize_text_field', $types );
	}
     
    global $post;
    $separator = !empty($atts['separator']) ? @strval($atts['separator']) : ', ';
    $out_terms = array();
    foreach ($types as $taxonomy_slug) {
        $terms = get_the_terms($post->ID, $taxonomy_slug);
        if ( $terms && !is_wp_error( $terms )) {

			foreach ( $terms as $term ) {
				// Adjust the term in case WPML is not set to auto-adjust IDs.
				$term = get_term( apply_filters( 'wpml_object_id', $term->term_id, $taxonomy_slug, true ) );
				// Check whether the filter and the core function return the right object type.
				if ( ! $term instanceof WP_Term ) {
					continue;
				}
				
				// Get the selected edition of term
				$term_selected_edition = get_term_meta($term->term_id,'wpcf-select-edition',true); 
				// Continue if section not in current edition 
				if ( $term_selected_edition != $current_edition_id ) {
					continue;
				}

				switch ( $atts['format'] ) {
					case 'text':// DEPRECATED at 1.9, keep for backwards compatibility
						$text = $term->name;
						switch ( $atts['show'] ) {
							case 'description':
								$text = $term->description;
								break;
							case 'count':
								$text = $term->count;
								break;
							case 'slug':
								$text = $term->slug;
								break;
						}
						$out_terms[ $term->name ] = $text;
						break;
					case 'name':
						$out_terms[ $term->name ] = $term->name;
						break;
					case 'description':
						$out_terms[ $term->name ] = $term->description;
						break;
					case 'count':
						$out_terms[ $term->name ] = $term->count;
						break;
					case 'slug':
						$out_terms[ $term->name ] = urldecode( $term->slug );
						break;
					case 'url':
						$term_link = get_term_link( $term, $taxonomy_slug );
						$out_terms[ $term->name ] = $term_link;
						break;
					default:
						$term_link = get_term_link( $term, $taxonomy_slug );
						$text = $term->name;
						switch ( $atts['show'] ) {
							case 'description':
								$text = $term->description;
								break;
							case 'count':
								$text = $term->count;
								break;
							case 'slug':
								$text = $term->slug;
								break;
						}
						$out_terms[ $term->name ] = '<a href="' . $term_link . '">' . $text . '</a>';
						break;
				}
			}

        }
    }

    if (!empty($out_terms)) {
        if ($atts['order'] == 'asc') {
            ksort($out_terms);
        } elseif ($atts['order'] == 'desc') {
            ksort($out_terms);
            $out_terms = array_reverse($out_terms);
        }
        $out = implode($separator, $out_terms);
    }
    
    apply_filters('wpv_shortcode_debug','wpv-post-taxonomy', json_encode($atts), '', 'Data received from cache', $out);
    
    return $out;
}


/*
	Grant media upload access and rights for visitors for a CRED form
*/

add_shortcode( 'show_if_user_logged_out', 'show_if_user_logged_out_func');
function show_if_user_logged_out_func($attr, $content='') {
	// provide defaults
	$atts = shortcode_atts(
		array(
			//
		),
		$atts
	);
	$content = do_shortcode($content);
	if ( !is_user_logged_in() )
		return $content;
}

add_shortcode( 'show_if_user_logged_in', 'show_if_user_logged_in_func');
function show_if_user_logged_in_func($attr, $content='') {
	// provide defaults
	$atts = shortcode_atts(
		array(
			//
		),
		$atts
	);
	$content = do_shortcode($content);
	if ( is_user_logged_in() )
		return $content;
}

add_shortcode( 'get_cred_urlparam', 'cred_field_urlparam_email');
function cred_field_urlparam_email($attr) {
	// Used in = 51735 ( cred ) 
	// Used as = [cred_user_form form="editer-un-utilisateur" user="[get_cred_urlparam]"]
	// Used for = https://www.fifam.fr/modification-dun-utilisateur/?email=contact@1015productions.fr
	 $user = get_user_by( 'email', esc_attr($_GET['email']) );
	// print_r($user);
     return $user->ID;
}

add_action( 'admin_init','reset_guest_caps', 9);
function reset_guest_caps(){
    global $current_user, $wpcf_access;
    if(isset($_GET['formid']) && $_GET['formid']==13226&&$current_user->ID==0)
    {
        $wpcf_access->settings=array();
    }
}

function filterGetTermArgs($args, $taxonomies) {
    global $typenow;

    if ($typenow == 'film') {
        // check whether we're currently filtering selected taxonomy
        if (implode('', $taxonomies) == 'section') {
            //Add categories term ID that you want to show
            $cats = array(145); // List of category(term ID) that you want to add as an array

            if (empty($cats))
                $args['include'] = array(99999999); // no available categories
            else
                $args['include'] = $cats; //It will only show the category that you mentioned in above array
        }
    }

    return $args;
}

/*
	SC for types wafftwo 
*/
// Add Shortcode [waff_gallery] 
function func_waff_gallery($atts, $content='') {
    // provide defaults
    $atts = shortcode_atts(
        array(
			'field' => '',
			'size' => 'film-gallery-image',
			'blockquote-title' => 'L\'avis du festival',
			'blockquote-footer' => 'Annouchka De Andrade, Directrice artistique',
        ),
        $atts
    );
	$content = do_shortcode($content);

	$field = types_render_field( $atts['field'], array(
		//'output' 	=> 'raw',
		//'url' 	=> 'true',
		'size' 		=> $atts['size'], 
		//'show_name' => true, 
		'alt'		=> '%%DESCRIPTION%%', 
		'title' 	=> '%%CAPTION%%', //%%TITLE%%
		'class' 	=> 'img-fluid',
		'style' 	=> 'height: 600px; object-fit: cover; width: 100%;',
		'separator'	=> '&', //KO
		)
	);
	$fields =  explode('&', $field);

	$displays = array(
		'col-12 col-lg-9 media',
		'col-12 col-lg-3 offset-lg-0 media',
		'col-12 col-lg-5 offset-lg-5 media',
		'col-12 col-lg-3 offset-lg-2 media',
		'col-12 col-lg-7 offset-lg-5 media',
		'col-12 col-lg-5 offset-lg-0 media',
		'col-12 col-lg-3 offset-lg-0 media',
		'col-12 col-lg-4 offset-lg-8 media',
		'col-12 col-lg-8 offset-lg-0 media',
		'col-12 col-lg-5 offset-lg-3 media',
		'col-12 col-lg-3 offset-lg-8 media',
		'col-12 col-lg-7 offset-lg-5 media',
		'col-12 col-lg-5 offset-lg-0 media',
		'col-12 col-lg-3 offset-lg-9 media',
		'col-12 col-lg-9 offset-lg-3 media',
		'col-12 col-lg-3 offset-lg-0 media',
		'col-12 col-lg-5 offset-lg-5 media',
		'col-12 col-lg-3 offset-lg-2 media',
		'col-12 col-lg-7 offset-lg-5 media',
		'col-12 col-lg-5 offset-lg-0 media',
		'col-12 col-lg-3 offset-lg-0 media',
		'col-12 col-lg-4 offset-lg-8 media',
		'col-12 col-lg-8 offset-lg-0 media',
		'col-12 col-lg-5 offset-lg-3 media',
		'col-12 col-lg-3 offset-lg-8 media',
		'col-12 col-lg-7 offset-lg-5 media',
		'col-12 col-lg-5 offset-lg-0 media',
		'col-12 col-lg-3 offset-lg-0 media',
	);
	// Before
	$footer = explode(',', func_do_markdown(array(), $atts['blockquote-footer']) );
	$output = '<div class="row medias contrast--light align-items-center row-cols-4 pt-8 pb-8 g-0 f-w">
				<div class="col-12 col-lg-3 excerpt p-gutter-l pt-4 pb-4 pr-4 --pl-4">';

	if ( $content != '' ) {
		$output .= sprintf(
				'	<span class="subline mb-3">%s</span>
					<blockquote class="blockquote mt-2">
					<p>%s</p>
						%s
					</blockquote>
			',
			esc_html($atts['blockquote-title']),
			$content,
			(($footer[0] != '')?sprintf('<footer class="blockquote-footer">%s,<cite>%s</cite></footer>', $footer[0], $footer[1]):'')
		);
	}
	$output .= '</div>';
	
	//Loop
	foreach( $fields as $index => $field ) {
		preg_match_all('/<img.*?alt="(.*?)".*>/', $field, $alt);
		preg_match_all('/<img.*?title="(.*?)".*>/', $field, $title);
		$alt = implode($alt[1]);
		$title = implode($title[1]);
		
		$output .= sprintf(
			'<div class="%s" id="%s">
				<figure>
					<picture class="lazy">%s</picture>
					%s
				</figure>				
			</div>',
			$displays[$index],
			$index,
			$field,
			(($alt != '' || $title != '')?sprintf('<figcaption><strong>%s</strong> %s</figcaption>', esc_html($title), esc_html($alt)):'')
		);
	}

	// After
	$output .= '</div>';

  	return $output;
}
add_shortcode( 'waff_gallery', 'func_waff_gallery' );

function func_linebreaks_to_list($atts, $content='') {
    // provide defaults
    $atts = shortcode_atts(
        array(
			'ul_class' => '',
			'li_class' => '',
        ),
        $atts
	);
	$output = '';
	//$content = do_shortcode($content);
	$content = strip_tags(do_shortcode($content), array('span','strong','em','a','i','b','u'));
	$contents = explode("\n", $content);
	$notempty = 0;
	foreach($contents as $k => $v)
		if( !empty($v) || (string)$v != '' )
			$notempty++;

	if($notempty > 0) {
		$output .= '<ul class="'.$atts['ul_class'].'">';
		foreach($contents as $content) {
			if ( $content != '')
				$output .= '<li class="'.$atts['li_class'].'">' . func_do_markdown(array(), $content) . '</li>';
		}
		$output .= '</ul>';
	} 
	return $output;
}
add_shortcode( 'linebreaks_to_list', 'func_linebreaks_to_list' );


function func_get_formats($atts, $content='') {
	global $current_edition_id;

    // provide defaults
    $atts = shortcode_atts(
        array(
			'field' 			=> 'f-available-formats',
			'output' 			=> 'language',
			'for_projection' 	=> 0,
        ),
        $atts
	);
	$output = '<!-- func_get_formats : outputs -->';
	//$content = do_shortcode($content);

	$postid = get_the_ID();
	$posttype = get_post_type();
	$fields = get_post_meta( $postid, 'wpcf-'.$atts['field'], false); // true = no array 

	// Check if has_projections
	$relationship = 'film';
	$forposttype = 'projection';
	$count_connections 	= 0;
	$has_relationship 	= toolset_get_relationship( array( $relationship, $forposttype ) );
	$has_projections 	= false;

	if ( $has_relationship ) {
		$parent = $has_relationship['roles']['parent']['types'][0];
		$child = $has_relationship['roles']['child']['types'][0];
		$origin = ( $parent == $posttype ) ? 'parent' : 'child';
		// Get connected posts
		$connections = toolset_get_related_posts( $postid, array($relationship,$forposttype), $origin, 9999, 0, array(), 'post_id', 'other', null, 'ASC', true, $count_connections );
		if ( !empty($connections) )  $has_projections = true;
	}

	/*
		[format] => DCP
		[kdm] => 1
		[format_information] => 2K
		[vo] => en
		[vostfr] => 1
		[vost] => fr
		[without_dialogue] => 1
		[sound_format] => 5.1
	*/

	$has_kdm 				= false;
	$has_withoutdialogue 	= false;
	$has_3D					= false;
	$has_vostfr 			= false;
	$has_youngpublic		= false;
	$has_highlight			= false;
	$has_guest				= false;

	$formats				= array();
	$format_informations	= array();
	$vos					= array();
	$vost					= array();
	$sound_format			= array();
	$guests					= array();

	foreach($fields as $index => $field) {
		//print_r($field);
		if ( $field['format'] != '' && $field['format'] != 'N/A' )
			$formats[] = $field['format'];
		if ( $field['format_information'] != '' && $field['format_information'] != 'N/A' )
			$format_informations[] = $field['format_information'];
		if ( $field['vo'] != '' && $field['vo'] != 'N/A' )
			$vos[] = $field['vo'];
		if ( $field['vost'] != '' && $field['vost'] != 'N/A' )
			$vost[] = $field['vost'];
		if ( $field['sound_format'] != '' && $field['sound_format'] != 'N/A' )
			$sound_format[] = $field['sound_format'];
		if ( $field['kdm'] == 1 ) 
			$has_kdm = true;
		if ( $field['without_dialogue'] == 1 ) 
			$has_withoutdialogue = true;
		if ( $field['format_information'] == "3D" ) 
			$has_3D = true;
		if ( $field['vostfr'] == 1 ) 
			$has_vostfr = true;
	}

	if ( $has_projections == true && $atts['output'] == 'tag' ) {
		foreach($connections as $index => $connection) {
			// Don't show metas if post is a draft or trash
			if ( get_post_status($connection) != 'publish') continue;
			// Don't show metas if not the correct edition ( [0] = a projection cannot have multiple editions )
			$edition = get_the_terms($connection, 'edition');
			if ( $edition[0]->term_id != $current_edition_id) continue;
			// Get metas
			if ( get_post_meta( $connection, 'wpcf-p-young-public', true) == 1 ) // true = no array
				$has_youngpublic = true;
			if ( get_post_meta( $connection, 'wpcf-p-highlights', true) == 1 ) // true = no array
				$has_highlight = true;
			if ( get_post_meta( $connection, 'wpcf-p-is-guest', true) == 1 ) { // true = no array
				$has_guest = true;
				$contact 	= get_post_meta( $connection, 'wpcf-p-e-guest-contact', true);
				$lastname 	= get_post_meta( $contact, 'wpcf-c-name', true);
				$firstname 	= get_post_meta( $contact, 'wpcf-c-firstname', true);
				$surname 	= get_post_meta( $contact, 'wpcf-c-surname', true);
				$guests[] 	= (($surname != '')?$surname:$firstname.' '.$lastname); 
			}
		}
	}

	if ( $atts['output'] == 'language' ) {
		if ( !empty($vos) ) 				$output .= '<span class="language-item link-disabled">VO('.implode(',', $vos).')</span>';
		if ($has_vostfr == true) 			$output .= '<span class="language-item link-disabled">VOSTFR</span>';
		if ( !empty($vost) ) 				$output .= '<span class="language-item link-disabled">VOST('.implode(',', $vost).')</span>';

	} else if ( $atts['output'] == 'icon' ) {
		if ($has_withoutdialogue == true) 	$output .= '<span class="icon-item link-disabled"><i class="icon icon-without mr-1"></i></span>';
		if ($has_3D == true) 				$output .= '<span class="icon-item link-disabled"><i class="icon icon-3d mr-1"></i></span>';
	} else if ( $atts['output'] == 'format' ) {
		if ( !empty($formats) ) 				$output .= '<span class="format-item link-disabled">'.implode(', ', $formats).'</span>';
		if ( !empty($format_informations) ) 	$output .= '<span class="format-item link-disabled">'.implode(', ', $format_informations).'</span>';
		//$output .= 'has_projections : '.$has_projections;
		//$output .= 'count_connections : '.$count_connections;
		//$output .= 'has_kdm : '.$has_kdm;
	} else if ( $atts['output'] == 'tag' ) {
 		if ($has_highlight == true) 
			$output .= sprintf('<span class="badge text-wrap color-black text-left text-uppercase normal" style="max-width: 5rem;">
				<i class="icon icon-sun float-left mr-1 f-14"></i>
				<small>Temps-<strong class="bold">fort</strong></small>
			</span>');
		if ($has_youngpublic == true) 
			$output .= sprintf('<span class="badge text-wrap color-black text-left text-uppercase normal" style="max-width: 6rem;">
				<i class="icon icon-young float-left mr-1 f-14"></i>
				<small>Parents-<strong class="bold">enfants</strong></small>
			</span>');
		if ($has_guest == true) 
			$output .= sprintf('<span class="badge text-wrap color-black text-left text-uppercase normal" style="max-width: 7rem;">
				<i class="icon icon-guest float-left mr-1 f-14"></i>
				<small>Avec <span class="screen-reader-text">invitÃ©</span><strong class="bold">%s</strong></small>
			</span>',
			implode(',', $guests)
			);
	} else {
		$output = '#ERROR';
	}

	return $output;
}
add_shortcode( 'get_formats', 'func_get_formats' );


/* Remove Views Wraps output for slick sliders 
https://toolset.com/forums/topic/the-div-that-wraps-the-view-is-bloated/
*/
add_filter( 'wpv_filter_wpv_view_shortcode_output', 'prefix_clean_view_output', 5, 2 );
function prefix_clean_view_output( $out, $id ) {
	$clean_view_ids = array(
		'25296', // projections-jour : Slick-slides tracks don't need a wrap  = ID IDENTIQUE  dev et dev2
		'25310', // projections-film-jour : Accordion  don't need a wrap  = ID IDENTIQUE  dev et dev2
		'25300', // contact : don't need a wrap = ID IDENTIQUE  dev et dev2
		'25294', // Vue toutes les projections / film : don't need a wrap= ID IDENTIQUE  dev et dev2
		'25580', // Vue Projection /jour /room : don't need a wrap = ID IDENTIQUE  dev et dev2
		'25304', // Vue Projection /jour /film /ajax : don't need a wrap
		//'54055', // Vue Related / section : don't need a wrap > ne pas ajouter sinon bug 
	);
	// If this view is inside views to clean, clean it 
	if ( in_array($id, $clean_view_ids) ) {
        $start = strpos( $out, '<!-- wpv-loop-start -->' );
        if ( 
            $start !== false
            && strrpos( $out, '<!-- wpv-loop-end -->', $start ) !== false
        ) {
            $start = $start + strlen( '<!-- wpv-loop-start -->' );
            $out = substr( $out , $start );
            $end = strrpos( $out, '<!-- wpv-loop-end -->' );
            $out = substr( $out, 0, $end );
		}
	}
    // Otherwise normally output
    return $out;
}


function wpv_is_odd($number) {
	//Get the remainder of our number divided by 2.
	$remainder = $number % 2;

	//If the remainder is 0, then it means
	//that the number is even.
	if($remainder == 0){
		return false;
	} else {
		return true;
	}
}


$attributes = array();
function func_set_get($atts, $content){
	global $attributes;
	//print_r(array( $atts, $content, $attributes));
	
    extract(shortcode_atts(array(
		'action' 	=> 'set',
		'attribute' => '',
	), $atts));
	
	// Get 
	if ( $attributes[$atts['attribute']] != '' ) {
		$res = $attributes[$atts['attribute']];
	} else {
		$res = do_shortcode($content); //Fallback default value
	}

	// Set 
    if($action == 'set'){
        $attributes[$atts['attribute']] = do_shortcode($content);
        $res = '';
	}
	
    return $res;
}
add_shortcode('set-get', 'func_set_get');

/**
 * Used in taxonomies templates 
 */
function get_counts($taxonomy_name = 'section', $taxonomy_id = array(), $exclude = array()) {

	/*
		Get Counts SQL method 
	*/

	/*
	// Get 'wpcf-p-is-guest' // SELECT proj.post_title, film.post_title, proj_meta_key.meta_value
	global $wpdb;
	$sql = <<<SQL
	SELECT film.post_title, film.ID
	FROM wp_posts AS proj, 
	wp_posts AS film, 
	wp_postmeta AS proj_meta_key, 
	wp_postmeta AS proj_meta_film,
	wp_term_relationships AS trs1,
	wp_term_relationships AS trs2
	WHERE ( proj.ID = proj_meta_key.post_id ) 
	AND (proj_meta_film.post_id = proj.ID)
	AND (proj_meta_film.meta_key = '_wpcf_belongs_film_id')
	AND (proj_meta_film.meta_value = film.ID )
	AND ( proj_meta_key.meta_key = 'wpcf-p-is-guest' AND CAST(proj_meta_key.meta_value AS SIGNED) = '1' )
	AND proj.post_type = 'projection' 
	AND ((proj.post_status = 'publish' OR proj.post_status = 'private'))
	AND trs1.object_id = film.ID
	AND trs1.term_taxonomy_id = 219
	AND trs2.object_id = film.ID
	AND trs2.term_taxonomy_id = 221
	GROUP BY proj.ID 
	ORDER BY proj.menu_order, proj.post_date DESC
	SQL;

	$results = $wpdb->get_results($sql);
	print_r($results);
	print_r(count($results));

	// Get 'wpcf-p-young-public' // SELECT proj.post_title, film.post_title, proj_meta_key.meta_value
	global $wpdb;
	$sql = <<<SQL
	SELECT film.post_title, film.ID
	FROM wp_posts AS proj, 
	wp_posts AS film, 
	wp_postmeta AS proj_meta_key, 
	wp_postmeta AS proj_meta_film,
	wp_term_relationships AS trs1,
	wp_term_relationships AS trs2
	WHERE ( proj.ID = proj_meta_key.post_id ) 
	AND (proj_meta_film.post_id = proj.ID)
	AND (proj_meta_film.meta_key = '_wpcf_belongs_film_id')
	AND (proj_meta_film.meta_value = film.ID )
	AND ( proj_meta_key.meta_key = 'wpcf-p-young-public' AND CAST(proj_meta_key.meta_value AS SIGNED) = '1' )
	AND proj.post_type = 'projection' 
	AND ((proj.post_status = 'publish' OR proj.post_status = 'private'))
	AND trs1.object_id = film.ID
	AND trs1.term_taxonomy_id = 219
	AND trs2.object_id = film.ID
	AND trs2.term_taxonomy_id = 221
	GROUP BY proj.ID 
	ORDER BY proj.menu_order, proj.post_date DESC
	SQL;

	$results = $wpdb->get_results($sql);
	print_r($results);
	print_r(count($results));

	// Get 'wpcf-p-highlights' // SELECT proj.post_title, film.post_title, proj_meta_key.meta_value
	global $wpdb;
	$sql = <<<SQL
	SELECT film.post_title, film.ID
	FROM wp_posts AS proj, 
	wp_posts AS film, 
	wp_postmeta AS proj_meta_key, 
	wp_postmeta AS proj_meta_film,
	wp_term_relationships AS trs1,
	wp_term_relationships AS trs2
	WHERE ( proj.ID = proj_meta_key.post_id ) 
	AND (proj_meta_film.post_id = proj.ID)
	AND (proj_meta_film.meta_key = '_wpcf_belongs_film_id')
	AND (proj_meta_film.meta_value = film.ID )
	AND ( proj_meta_key.meta_key = 'wpcf-p-highlights' AND CAST(proj_meta_key.meta_value AS SIGNED) = '1' )
	AND proj.post_type = 'projection' 
	AND ((proj.post_status = 'publish' OR proj.post_status = 'private'))
	AND trs1.object_id = film.ID
	AND trs1.term_taxonomy_id = 219
	AND trs2.object_id = film.ID
	AND trs2.term_taxonomy_id = 221
	GROUP BY proj.ID 
	ORDER BY proj.menu_order, proj.post_date DESC
	SQL;

	$results = $wpdb->get_results($sql);
	print_r($results);
	print_r(count($results));
	*/

	global $current_edition_id;
	global $post; 

	// Get counts 
	$counts = array();

	/**
	 * All films 
	 */

	// Films Args
	$films_in_section_args = array(
		'post_type' 		=> 'film',
		'posts_per_page' 	=> -1,
		'nopaging' 			=> true,
		'order' 			=> 'DESC',
		'post_status' 		=> 'publish',
		// In edition & in section
		'tax_query' => array(
			'relation' 		=> 'AND',
			array (
				'taxonomy' 	=> 'edition',
				'field' 	=> 'term_id',
				'terms' 	=> array($current_edition_id),
			),
			// Added by a conditionnal
		),
		// Has status required
		'meta_query' => array(
			'relation' 		=> 'AND',
			array(
				'key'   	=> '_status',
				'value' 	=> ['approved','programmed'],
				'compare' 	=> 'IN'
			)
		),
		// Gets IDs
		'fields' => 'ids',
	);

	// Conditionnal 
	if ( $taxonomy_name === 'section')
		$films_in_section_args['tax_query'][] = array (
			'taxonomy'	=> $taxonomy_name,
			'field' 	=> 'term_id',
			'terms' 	=> $taxonomy_id,
		);

	// Query 
	$films_in_section_query = new WP_Query($films_in_section_args);

	// Results
	$films_in_section_results = $films_in_section_query->posts;

	// Store count
	$counts['films'] = count($films_in_section_results); //found_posts

	// Restore original Post Data 
	wp_reset_postdata();
	wp_reset_query();

	/**
	 * All promoted films ( with field )
	 */

	// Promoted args
	$films_promoted_args = array(
		'post_type' 		=> 'film',
		'posts_per_page' 	=> -1,
		'nopaging' 			=> true,
		'order' 			=> 'DESC',
		'post_status' 		=> 'publish',
		// In edition & in section
		'tax_query' => array(
			'relation' 		=> 'AND',
			array (
				'taxonomy' 	=> 'edition',
				'field' 	=> 'term_id',
				'terms' 	=> array($current_edition_id),
			),
			// Added by a conditionnal
		),
		// Has status required
		'meta_query' => array(
			'relation' 		=> 'AND',
			array(
				'key'   	=> '_status',
				'value' 	=> ['approved','programmed'],
				'compare' 	=> 'IN'
			),
			array(
				'key' 		=> 'wpcf-f-promote',
				'compare' 	=> '=',
				'value' 	=> 1,
				'type' 		=> 'NUMERIC'
			),
		),
		// Gets IDs
		'fields' => 'ids',
	);

	// Conditionnal 
	if ( $taxonomy_name === 'section')
		$films_promoted_args['tax_query'][] = array (
			'taxonomy'	=> $taxonomy_name,
			'field' 	=> 'term_id',
			'terms' 	=> $taxonomy_id,
		);

	// Query 
	$films_promoted_args = new WP_Query($films_promoted_args);

	// Results 
	$films_promoted_results = $films_promoted_query->posts;

	// Store count
	$counts['wpcf-f-promote'] = count($films_promoted_results);

	// Restore original Post Data 
	wp_reset_postdata();
	wp_reset_query();

	/**
	 * All projections belongs to a film 
	 */

	// All projections Query args 
	$projections_args = array(
		'post_type' 		=> 'projection',
		'posts_per_page' 	=> -1,
		'nopaging' 			=> true,
		'order' 			=> 'DESC',
		'post_status' 		=> 'publish',
		'post__in'			=> $exclude,
			// In edition & in section
		'tax_query' => array(
			'relation' 		=> 'AND',
			array (
				'taxonomy' 	=> 'edition',
				'field' 	=> 'term_id',
				'terms' 	=> array($current_edition_id),
			),
			// Added by a conditionnal
		),
		// Have films
		'meta_query' => array(
			'relation' 		=> 'AND',
			'belongs' => array(
				'compare' 	=> 'IN',
				'key' 		=> '_wpcf_belongs_film_id',
				'value' 	=> $films_in_section_results,
			),
		),
		// Gets IDs
		'fields' => 'ids',
	);

	// Conditionnal 
	if ( $taxonomy_name === 'room')
		$projections_args['tax_query'][] = array (
			'taxonomy'	=> $taxonomy_name,
			'field' 	=> 'term_id',
			'terms' 	=> $taxonomy_id,
		);

	// Query 
	$projections_query = new WP_Query($projections_args);

	// Results 
	$projections_results = $projections_query->posts;

	// Store count
	$counts['projections'] = count($projections_results);

	// Restore original Post Data 
	wp_reset_postdata();
	wp_reset_query();

	/**
	 * All projections not belongs to a film 
	 */

	// All projections Query args 
	$programs_args = array(
		'post_type' 		=> 'projection',
		'posts_per_page' 	=> -1,
		'nopaging' 			=> true,
		'order' 			=> 'DESC',
		'post_status' 		=> 'publish',
		'post__in'			=> $exclude,
		'post__not_in'		=> $projections_results,
		// In edition & in section
		'tax_query' => array(
			'relation' 		=> 'AND',
			array (
				'taxonomy' 	=> 'edition',
				'field' 	=> 'term_id',
				'terms' 	=> array($current_edition_id),
			),
			// Added by a conditionnal
		),
		// Have no films
		'meta_query' => array(
			'relation' 		=> 'AND',
			'belongs' => array(
				'compare' 	=> 'NOT EXISTS',
				'key' 		=> '_wpcf_belongs_film_id',
			),
		),
		// Gets IDs
		'fields' => 'ids',
	);

	// Conditionnal 
	if ( $taxonomy_name === 'room')
		$programs_args['tax_query'][] = array (
			'taxonomy'	=> $taxonomy_name,
			'field' 	=> 'term_id',
			'terms' 	=> $taxonomy_id,
		);

	// Query 
	$programs_query = new WP_Query($programs_args);

	// Results 
	$programs_results = $programs_query->posts;

	// Store count
	$counts['programs'] = count($programs_results);

	// Restore original Post Data 
	wp_reset_postdata();
	wp_reset_query();
	
	/**
	 * Projection with fields 
	 */

	$projection_count_fields = array('wpcf-p-is-guest', 'wpcf-p-young-public', 'wpcf-p-highlights');
	foreach ($projection_count_fields as $f) {
		// Query args 
		$p_args = array(
			'post_type' 		=> 'projection',
			'posts_per_page' 	=> -1,
			'nopaging' 			=> true,
			'order' 			=> 'DESC',
			'post_status' 		=> 'publish',
			'post__in'			=> $exclude,
			// In edition & in section
			'tax_query' => array(
				'relation' 		=> 'AND',
				array (
					'taxonomy' 	=> 'edition',
					'field' 	=> 'term_id',
					'terms' 	=> array($current_edition_id),
				),
				// Added by a conditionnal
			),
			// Have films
			'meta_query' => array(
				'relation' 		=> 'AND',
				'belongs' => array(
					'compare' 	=> 'IN',
					'key' 		=> '_wpcf_belongs_film_id',
					'value' 	=> $films_in_section_results,
				),
				'p-highlights' => array(
					'key' 		=> $f,
					'compare' 	=> '=',
					'value' 	=> 1,
					'type' 		=> 'NUMERIC'
				)
			),
			// Gets IDs
			'fields' => 'ids',
		);

		// Conditionnal 
		if ( $taxonomy_name === 'room')
			$p_args['tax_query'][] = array (
				'taxonomy'	=> $taxonomy_name,
				'field' 	=> 'term_id',
				'terms' 	=> $taxonomy_id,
			);

		// Query 
		$p_query = new WP_Query($p_args);

		// Results 
		$p_results = $p_query->posts;

		// Store count
		$counts[$f] = count($p_results);

		if ($f === 'wpcf-p-is-guest') {
			$counts['guests'] = $p_results;
		}

		// Restore original Post Data 
		wp_reset_postdata();
	}

	return $counts;
}






if (is_admin()) {
   //add_filter('get_terms_args', 'filterGetTermArgs', 10, 2);
}
